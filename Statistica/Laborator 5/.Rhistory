x ^ (a - 1) * exp(-x)
return (integrate(f, 0, Inf, a = 5)$value)
x <- val[which(cumsum(prob)-u>0)[1]]
fGama(fg)
fGama <-  function (f) {
return (integrate(f, 0, Inf, a = 5)$value)
}
fGama(fg)
#Functia Gama cu George Oprian
fg <- function (x, a){
x ^ (a - 1) * exp(-x)
}
fGama(fg)
#Functia Gama cu George Oprian
fg <- function (x, a){
x ^ (a - 1) * exp(-x)
}
fGama <-  function (f) {
return (integrate(f, 0, Inf, a = 5)$value)
}
f4 <- function (x, a, b) {
x^(a - 1) * (1 - x) ^ (b - 1)
}
fBeta <- function (f) {
return (integrate(f, 0, 1, a = 5, b = 6))
}
View(fGama)
fBeta(f4)
fGama(fg)
fBeta(f4)
1.2 %% 1 == 0
5 %% 1 == 0
return (n %% 1 == 0)
e_interg <- function(n){
return (n %% 1 == 0)
}
gama_nume <- function (n) {
if (e_intreg(n)) {
print ("e integ")
} else {
print (nu e intren)
}
}
gama_nume <- function (n) {
if (e_intreg(n)) {
print ("e integ")
} else {
print (nu e intren)
}
}
e_interg <- function(n){
return (n %% 1 == 0)
}
e_intreg(1)
e_intreg <- function(n){
return (n %% 1 == 0)
}
gama_nume <- function (n) {
if (e_intreg(n)) {
print ("e integ")
} else {
print (nu e intren)
}
}
gama_nume <- function (n) {
if (e_intreg(n)) {
print ("e integ")
} else {
print (nu e intren)
}
}
e_intreg(1.2)
e_intreg(1)
gama_nume <- function (n) {
if (e_intreg(n) == TRUE) {
print ("e integ")
} else {
print ("e intreg")
}
}
gama_nume <- function (n) {
if (e_intreg(n)) {
print ("e integ")
} else {
print ("nu e intreg")
}
}
gama_nume(12.3)
gama_nume(12)
gama_nume(-12)
e_natural <- function(n){
return ((n %% 1 == 0)  && (n > 0))
}
e_natural <- function(n){
return ((n %% 1 == 0)  && (n > 0))
}
gama_nume <- function (n) {
if (e_natural(n)) {
print ("e natural")
} else {
print ("nu e natural")
}
}
gama_nume(-12)
gama_nume(0)
gama_nume <- function (n) {
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
} else {
print ("nu e natural")
}
}
gama_nume(5)
gama_nume(6)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
} else {
print ("nu e natural")
}
}
gama_nume(1)
3 / 2 - 1
(3 / 2 - 1) * 2
0.5 == 1/2
sqrt(4)
pi
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (b == 1/2){
return (sqrt(pi))
}
if (e_natural(b - 1/2)){
return ((n - 1) * gama_nume(n - 1))
}
}
gama_nume(3/2)
gama_nume(3/2)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
return ((n - 1) * gama_nume(n - 1))
}
}
gama_nume(3/2)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
print ("folosesc proprietatea 4")
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
print ("folosesc proprietatea 2")
return ((n - 1) * gama_nume(n - 1))
}
}
gama_nume(3/2)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
print ("folosesc proprietatea 4", n)
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
print ("folosesc proprietatea 2", n)
return ((n - 1) * gama_nume(n - 1))
}
}
gama_nume(3/2)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
print ("folosesc proprietatea 4" + n)
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
print ("folosesc proprietatea 2" + n)
return ((n - 1) * gama_nume(n - 1))
}
}
gama_nume(3/2)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
print (cat("folosesc proprietatea 4", n))
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
print (cat("folosesc proprietatea 2", n))
return ((n - 1) * gama_nume(n - 1))
}
}
gama_nume(3/2)
runif (1)
for i = 1:10{
print (i)
}
for i in (1:10){
print (i)
}
for i in (1:10){
print (i)
}
for (i in 1:10){
print (i)
}
help runif
help (runif)
runif(3.4)
runif(3,4)
runif(3.4)
runif(3.4)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(10)
y = (1, 2)
y = [1, 2]
y <- [1, 2]
y <- (1, 2)
y <- (1 2)
c(1, 1)
y <- c(1, 1)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
print (c("folosesc proprietatea 4", n))
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
print (cat("folosesc proprietatea 2", n))
return ((n - 1) * gama_nume(n - 1))
}
prod = 1
while (n > 1) {
prod = prod * (n - 1)
}
return integrate()
}
c("adas", 12)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
print (c("folosesc proprietatea 4", n))
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
print (c("folosesc proprietatea 2", n))
return ((n - 1) * gama_nume(n - 1))
}
prod = 1
while (n > 1) {
prod = prod * (n - 1)
}
#return integrate()
}
dpois(x - 4, lambda = 7)
dpois(x = 4, lambda = 7)
dpois(x = 4, lambda = 7)
gen_Var_poisson(lambda){
u = runif(1)
i = 0
p = exp(-lambda)
F = p
while (U >= F){
p = (lambda * p)/(i + 1)
i = i+ 1
F = F + p
}
return (c(p, i))
}
gen_Var_poisson(lambda){
U = runif(1)
i = 0
p = exp(-lambda)
F = p
while (U >= F){
p = (lambda * p)/(i + 1)
i = i+ 1
F = F + p
}
return (c(p, i))
}
gen_Var_poisson(lambda){
U = runif(1)
i = 0
p = exp(-lambda)
F = p
while (U >= F){
p = (lambda * p)/(i + 1)
i = i+ 1
F = F + p
}
return (c(p, i))
}
gen_Var_poisson(lambda){
U = runif(1)
i = 0
p = exp((-1) * lambda)
F = p
while (U >= F){
p = (lambda * p)/(i + 1)
i = i+ 1
F = F + p
}
return (c(p, i))
}
p = exp((-1) * lambda)
gen_Var_poisson <- function(lambda){
U = runif(1)
i = 0
p = exp((-1) * lambda)
F = p
while (U >= F){
p = (lambda * p)/(i + 1)
i = i+ 1
F = F + p
}
return (c(p, i))
}
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Var_poisson(4)
gen_Val_poisson <- function(n, lamda){
for (i in 1:n){
rez = c(rez, gen_Var_poisson(lamda)[1])
}
}
gen_Val_poisson(10, 4)
gen_Val_poisson <- function(n, lamda){
rez <- []
for (i in 1:n){
rez = c(rez, gen_Var_poisson(lamda)[1])
}
}
gen_Val_poisson(10, 4)
vec <- vector()
vec <- c(vec, 1, 2, 3)
gen_Val_poisson <- function(n, lamda){
rez <- vector()
for (i in 1:n){
rez = c(rez, gen_Var_poisson(lamda)[1])
}
}
gen_Val_poisson(10, 4)
gen_Val_poisson <- function(n, lamda){
rez <- vector()
for (i in 1:n){
rez = c(rez, gen_Var_poisson(lamda)[1])
}
return (rez)
}
gen_Val_poisson(10, 4)
gen_Val_poisson <- function(n, lamda){
rez <- vector()
for (i in 1:n){
rez = c(rez, gen_Var_poisson(lamda)[1])
}
return (rez)
}
gen_Val_poisson(10, 4)
gama_nume <- function (n) {
if (n == 1) {
return (1)
}
if (e_natural(n)) {
print ("folosesc proprietatea 3")
return (factorial(n - 1))
}
if (n == 1/2){
print (c("folosesc proprietatea 4", n))
return (sqrt(pi))
}
if (e_natural(n - 1/2)){
print (c("folosesc proprietatea 2", n))
return ((n - 1) * gama_nume(n - 1))
}
prod = 1
while (n >= 1) {
prod = prod * (n - 1)
}
return (integrate(prod))
}
